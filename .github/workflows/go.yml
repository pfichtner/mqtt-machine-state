name: Go

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os == 'darwin' && 'macos-latest' || matrix.os == 'linux' && 'ubuntu-latest' || matrix.os == 'windows' && 'windows-latest' }}

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [386, amd64, arm, arm64]
        exclude:
          - os: darwin
            arch: 386
          - os: darwin
            arch: arm
          - os: windows
            arch: 386
          - os: windows
            arch: arm

    steps:
     - name: Harden Runner
       uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
       with:
         egress-policy: audit

     - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
     - name: Setup Go
       uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
       with:
         go-version: '1.20'
         cache-dependency-path: subdir/go.sum
     - name: Build
       run: |
          go build -ldflags="-s -w" -v -o binaries/mqttmachinestate${{ matrix.os == 'windows' && '.exe' || '' }} ./...
       env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

     - name: Install UPX
       shell: bash
       run: |
         if [[ "${{ matrix.os }}" == 'darwin' ]]; then
           brew install upx
         elif [[ "${{ matrix.os }}" == 'linux' ]]; then
           sudo apt-get update && sudo apt-get install -y upx
         elif [[ "${{ matrix.os }}" == 'windows' ]]; then
           choco install upx -y
         fi

     - name: Pack/compress binary
       run: |
          upx binaries/*
       # if: matrix.os != 'windows' || (matrix.os == 'windows' && matrix.arch != 'amd64' && matrix.arch != 'arm64')
       if: matrix.os != 'windows' || matrix.arch != 'arm64'

     - name: Setup docker and docker-compose (missing on MacOS)
       if: matrix.os == 'darwin'
       # if: runner.os == 'macos'
       run: |
         # coreutils contains the timeout command used in one of the test scripts
         brew install docker docker-compose coreutils
         # Link the Docker Compose v2 plugin so it's understood by the docker CLI
         mkdir -p ~/.docker/cli-plugins
         ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose
         colima start

     - name: Run tests
       # bash is default on linux and mac but not windows
       shell: bash
       run: |
         cd tests
         for script in *.sh; do
           if [ -f "$script" ] && [ -x "$script" ]; then
             echo "Running $script..."
             ./"$script" binaries/mqttmachinestate${{ matrix.os == 'windows' && '.exe' || '' }}
           else
             echo "Skipping non-executable or non-existent file: $script"
           fi
         done
       # using qemu we could run arm binaries on linux as well
       if: (matrix.os == 'linux' || matrix.os == 'darwin') && (matrix.arch == 'amd64' || matrix.arch == '386')


     - name: Compress and move files
       run: |
         mkdir -p publish-artifacts
         tar -czf "publish-artifacts/mqttmachinestate-$(basename "$dir").tar.gz" -C binaries .
  
     - name: Upload Artifacts
       uses: actions/upload-artifact@1eb3cb2b3e0f29609092a73eb033bb759a334595 # v4.1.0
       with:
         name: publish-artifacts-${{ matrix.os }}-${{ matrix.arch }}
         path: "publish-artifacts/*"

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit

      - name: Download Artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5 # v1.13.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: "publish-artifacts*/*"
          makeLatest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

