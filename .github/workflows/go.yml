name: Go

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os == 'darwin' && 'macos-latest' || matrix.os == 'linux' && 'ubuntu-latest' || matrix.os == 'windows' && 'windows-latest' }}

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [386, amd64, arm, arm64]
        exclude:
          - os: darwin
            arch: 386
          - os: darwin
            arch: arm
          - os: windows
            arch: 386
          - os: windows
            arch: arm

    steps:
     - name: Harden Runner
       uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
       with:
         egress-policy: audit

     - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
     - name: Setup Go
       uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
       with:
         go-version-file: go.mod
         cache-dependency-path: subdir/go.sum
     - name: Build
       run: |
          go build -ldflags="-s -w" -v -o binaries/mqttmachinestate${{ matrix.os == 'windows' && '.exe' || '' }} ./...
       env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

     - name: Install UPX
       shell: bash
       run: |
         if [[ "${{ matrix.os }}" == 'darwin' ]]; then
           # Error: upx has been disabled because it is crashing for macOS Ventura or above! It was disabled on 2024-09-05.
           echo "DISABLED: brew install upx"
           # brew install upx
         elif [[ "${{ matrix.os }}" == 'linux' ]]; then
           sudo apt-get update && sudo apt-get install -y upx
         elif [[ "${{ matrix.os }}" == 'windows' ]]; then
           choco install upx -y
         fi

     - name: Pack/compress binary
       run: |
          upx binaries/*
       # if: matrix.os != 'windows' || (matrix.os == 'windows' && matrix.arch != 'amd64' && matrix.arch != 'arm64')
       if: (matrix.os != 'windows' || matrix.arch != 'arm64') && matrix.os != 'darwin'

     - name: Run tests
       # bash is default on linux and mac but not windows
       shell: bash
       run: |
         cd tests
         for script in *.sh; do
           if [ -f "$script" ] && [ -x "$script" ]; then
             echo "Running $script..."
             ./"$script" binaries/mqttmachinestate${{ matrix.os == 'windows' && '.exe' || '' }}
           else
             echo "Skipping non-executable or non-existent file: $script"
           fi
         done
       # using qemu we could run arm binaries on linux as well
       if: (matrix.arch == 'amd64' || matrix.arch == '386')

     - name: Compress and move files
       run: |
         mkdir -p publish-artifacts
         tar -czf "publish-artifacts/mqttmachinestate-$(basename "$dir").tar.gz" -C binaries .
  
     - name: Upload Artifacts
       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: publish-artifacts-${{ matrix.os }}-${{ matrix.arch }}
         path: "publish-artifacts/*"

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Download Artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@b7eabc95ff50cbeeedec83973935c8f306dfcd0b # v1.20.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: "publish-artifacts*/*"
          makeLatest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

